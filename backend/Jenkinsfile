def dev_environments = "${env.DEV_ENVS}".split(",")
def test_environments = "${env.TEST_ENVS}".split(",")
pipeline {
    agent any
    tools {
        jdk "JDK 11"
        maven 'Maven'
    }
    parameters {
        string(defaultValue: 'master', description: 'Branch or tag to build. Tags must be specified as "refs/tags/<tagName>".', name: 'BUILD_BRANCH')
        booleanParam(defaultValue: false, description: 'Check box to deploy build.', name: 'DEPLOY')
        choice(choices: ['DEV', 'TEST'], description: 'Deploy to this environment.', name: 'ENVIRONMENT')
        string(name: 'USERNAME')
        password(name: 'PASSWORD')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${params.BUILD_BRANCH}"]], userRemoteConfigs: [[url: 'https://github.com/bcgov/moh-keycloak-user-management']]])
                dir('config') {
                    checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: true, credentialsId: 'dasharpe-cred', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: 'https://subversion.hlth.gov.bc.ca/svn/ApplicationConfiguration/KeycloakUserManagementService']], quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])
                }
            }
        }
        stage('Build') {
            steps {
                dir("backend") {
                    sh 'mvn -Dmaven.test.skip=true package'
                }
            }
        }
        stage('Deploy') {
            when {
                expression { params.DEPLOY == true }
            }
            steps {
                dir("backend") {
                    script {
                        if (params.ENVIRONMENT == 'DEV') {
                            sshServer = dev_environments
                            config = '../config/DEV/application.yaml'
                            cert = '../config/DEV/fireblade.p12'
                        } else if (params.ENVIRONMENT == 'TEST') {
                            sshServer = test_environments
                        }
                        for (int i = 0; i < sshServer.size(); ++i) {
                            def remote = [:]
                            remote.name = sshServer[i]
                            remote.host = sshServer[i]
                            remote.user = params.USERNAME
                            remote.password = params.PASSWORD
                            remote.allowAnyHosts = true
                            remote.pty = true
                            sshCommand remote: remote, command: "pkill -u $params.USERNAME java; rm -f user-management-service.jar application.yaml fireblade.p12 run.sh"
                            sshPut remote: remote, from: 'target/user-management-service.jar', into: 'user-management-service.jar'
                            sshPut remote: remote, from: config, into: 'application.yaml'
                            sshPut remote: remote, from: cert, into: 'fireblade.p12'
                            sshPut remote: remote, from: 'run.sh', into: 'run.sh'
                            sshCommand remote: remote, command: 'chmod u+x run.sh; ./run.sh'
                        }
                    }
                }
            }
        }
    }
}